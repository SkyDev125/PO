' Considere o seguinte domínio de aplicação:

' Uma caneta tem uma dada capacidade de tinta,
' cor e uma marca. A caneta mantém ainda a quantidade 
' de tinta que tem. Quando se cria uma caneta é
' necessário indicar a sua marca, capacidade de tinta
' e cor. Uma caneta quando é criada está sempre cheia.
' A marca e a cor são representadas por uma cadeia de caracteres.
' Uma caneta pode escrever, ser recarregada e indicar a sua
' cor e quantidade de tinta ainda disponível. A operação de
' escrever recebe a cadeia de caracteres a escrever no terminal.
' Esta cadeia de caracteres só é escrita caso a caneta ainda tenha
' tinta (não interessa a quantidade). Escrever uma cadeia de caracteres 
' gasta uma quantidade de tinta igual ao número de caracteres a escrever
' (o método length() de String devolve o número de caracteres da cadeia de
' caracteres). Atenção que a quantidade de tinta não pode ficar um
' número negativo. A operação de recarregar recebe com a argumento a
' quantidade tinta a adicionar e deve ter em conta a capacidade da caneta.
' Deve devolver a quantidade de tinta não utilizada no carregamento.

' Acrescente agora uma nova funcionalidade que permite recarregar a
' caneta com tinta de uma determinada cor. O recarregamento ocorre
' com a funcionalidade descrita anteriormente se a cor da tinta a
' colocar for igual à cor da caneta, devolvendo neste caso a quantidade 
' de tinta não utilizada. Caso a cor seja diferente, então deve devolver -1.
' Note que a funcionalidade deste novo método deve ser construído à custa do
' anterior, havendo assim reutilização de código.


' Primeiro modele o este domínio e depois concretize-o.


' Acrescente um novo método que permite verificar se duas
' canetas são iguais ou não de acordo com a seguinte semântica:
' duas canetas são iguais se tiverem a mesma marca, cor e capacidade.

@startuml Pen

' + -> public
' - -> private
' # -> protected
' ~ -> package
' underlined -> static (represented by {static} as prefix )
' final -> {final} as prefix

' Define classes
class Pen {
    - {final} _max_capacity: float
    - _capacity: float
    - _colour: String
    - _brand: String
    + Pen(max_capacity: float, colour: String, brand: String)
    + write(str: String): void
    + refill(amount: float): float
    + refill_colour(amount: float, colour: String): float
    + colour(): String
    + capacity(): float
    + equals(pen: Pen): boolean


}


@enduml